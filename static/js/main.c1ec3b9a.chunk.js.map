{"version":3,"sources":["components/Header.js","components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","score","highScore","Square","className","key","id","onClick","clickSquare","alt","src","iconImage","value","Board","state","icons","selected","setValue","_this","setState","points","filter","array","i","length","j","Math","floor","random","_ref","randomize","console","log","_this2","this","components_Header","map","icon","components_Square","React","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,MAZf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BAEIF,EAAAC,EAAAC,cAAA,qBAAaH,EAAMI,OACnBH,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMK,cCQ1BC,MAdf,SAAgBN,GACZ,OACIC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SAASC,IAAKR,EAAMS,GAAIC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMS,MAC1ER,EAAAC,EAAAC,cAAA,OAAKS,IAAI,GAAGC,IAAKb,EAAMc,YACvBb,EAAAC,EAAAC,cAAA,mBAAWH,EAAMe,MAAQ,OAAS,mBC4DnCC,iNA5DXC,MAAQ,CACJC,QACAb,UAAW,EACXD,MAAO,EACPe,SAAU,MAGdC,SAAW,SAACX,GACRY,EAAKC,SAAS,CACVC,OAAQF,EAAKJ,MAAMM,OAAS,OAIpCZ,YAAc,SAACF,GACX,IAAMM,EAAQM,EAAKJ,MAAMC,MAAMM,OAAO,SAAAT,GAAK,OAAIA,EAAMN,KAAOA,IAC5DY,EAAKC,SAAS,CACVP,QACAX,MAAOiB,EAAKJ,MAAMb,MAAQ,EAC1Be,SAAUE,EAAKN,QAiC3B,SAAmBU,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADDM,EAEhB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgCM,EAAA,GAE5BP,EAAMG,GAFsBI,EAAA,IAhCvCC,CAAUZ,EAAKJ,MAAMC,OAKrBgB,QAAQC,IAAId,EAAKJ,MAAME,mFAElB,IAAAiB,EAAAC,KACL,OACIpC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACXN,EAAAC,EAAAC,cAACmC,EAAD,CAAQlC,MAAOiC,KAAKpB,MAAMb,QAC1BH,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACV8B,KAAKpB,MAAMC,MAAMqB,IAAI,SAAAC,GAAI,OACtBvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQjC,IAAKgC,EAAK/B,GACdA,GAAI+B,EAAK/B,GACTM,MAAOyB,EAAKzB,MACZD,UAAW0B,EAAK1B,UAChBH,YAAayB,EAAKzB,YAClBsB,UAAWG,EAAKH,uBAvCxBS,IAAMC,iBCGXC,MALf,WACE,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1ec3b9a.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Header(props) {\n    return (\n        <div>\n            <nav>\n                Clicky Earth\n                <span>Score {props.score}</span>\n                <span>High Score: {props.highScore}</span>\n            </nav>\n        </div>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nfunction Square(props) {\n    return (\n        <div>\n            {/* {props.icons.map(icon => ( */}\n            <div className=\"square\" key={props.id} onClick={() => props.clickSquare(props.id)}>\n                <img alt=\"\" src={props.iconImage} />\n                <p>value: {props.value ? \"True\" : \"false\"}</p>\n            </div>\n            {/* ))} */}\n        </div>\n    )\n}\n\n\nexport default Square;","// our imports from react as well as the components in use\nimport React from 'react';\nimport Header from './Header'\nimport Square from './Square';\nimport icons from '../icons.json';\n\n// we declare our class App react.component as our parent component\nclass Board extends React.Component {\n    state = {\n        icons,\n        highScore: 0,\n        score: 0,\n        selected: []\n    }\n\n    setValue = (id) => {\n        this.setState({\n            points: this.state.points + 1\n        })\n    }\n\n    clickSquare = (id) => {\n        const value = this.state.icons.filter(value => value.id !== id)\n        this.setState({\n            value,\n            score: this.state.score + 1,\n            selected: this.value\n        })\n        randomize(this.state.icons)\n        // this.pointCounter()\n        // console.log(value)\n        // console.log(this.state.icons)\n        // console.log(this.state.iconsValue)\n        console.log(this.state.selected)\n    };\n    render() {\n        return (\n            <div className=\"game\">\n                <Header score={this.state.score} />\n                <div className=\"game-board\">\n                    {this.state.icons.map(icon => (\n                        <Square key={icon.id}\n                            id={icon.id}\n                            value={icon.value}\n                            iconImage={icon.iconImage}\n                            clickSquare={this.clickSquare}\n                            randomize={this.randomize}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\n// function switchValue(value) {\n\n// }\n\nfunction randomize(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]]\n    }\n    // console.log(array)\n    return array;\n}\n\nexport default Board;\n","// our imports from react as well as the components in use\nimport React from 'react';\nimport Board from './components/Board';\nimport \"./App.css\"\n\nfunction App() {\n  return <Board />\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}